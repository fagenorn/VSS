
input_stream: "input_video"

input_side_packet: "REFINE_FACE_LANDMARKS:refine_face_landmarks"

output_stream: "FACE_LANDMARKS:face_landmarks"

node {
  calculator: "FlowLimiterCalculator"
  input_stream: "input_video"
  input_stream: "FINISHED:face_landmarks"
  input_stream_info: {
    tag_index: "FINISHED"
    back_edge: true
  }
  output_stream: "throttled_input_video"
  node_options: {
    [type.googleapis.com/mediapipe.FlowLimiterCalculatorOptions] {
      max_in_flight: 1
      max_in_queue: 1
      # Timeout is disabled (set to 0) as first frame processing can take more
      # than 1 second.
      in_flight_timeout: 0
    }
  }
}

node: {
  calculator: "ImageTransformationCalculator"
  input_stream: "IMAGE:throttled_input_video"
  input_side_packet: "ROTATION_DEGREES:input_rotation"
  input_side_packet: "FLIP_HORIZONTALLY:input_horizontally_flipped"
  input_side_packet: "FLIP_VERTICALLY:input_vertically_flipped"
  output_stream: "IMAGE:transformed_input_video"
}

node {
  calculator: "ImagePropertiesCalculator"
  input_stream: "IMAGE:transformed_input_video"
  output_stream: "SIZE:image_size"
}

###

node {
  calculator: "FaceDetectionShortRangeCpu"
  input_stream: "IMAGE:transformed_input_video"
  output_stream: "DETECTIONS:face_detections"
}

node {
  calculator: "DetectionsToRectsCalculator"
  input_stream: "DETECTIONS:face_detections"
  input_stream: "IMAGE_SIZE:image_size"
  output_stream: "NORM_RECT:raw_roi"
  options: {
    [mediapipe.DetectionsToRectsCalculatorOptions.ext] {
      rotation_vector_start_keypoint_index: 0  # Right eye.
      rotation_vector_end_keypoint_index: 1  # Left eye.
      rotation_vector_target_angle_degrees: 0
      conversion_mode: USE_KEYPOINTS
    }
  }
}

node {
  calculator: "RectTransformationCalculator"
  input_stream: "NORM_RECT:raw_roi"
  input_stream: "IMAGE_SIZE:image_size"
  output_stream: "face_recrop_roi"
  options: {
    [mediapipe.RectTransformationCalculatorOptions.ext] {
      scale_x: 2.0
      scale_y: 2.0
      shift_y: -0.1
      square_long: true
    }
  }
}

###

node {
  calculator: "PreviousLoopbackCalculator"
  input_stream: "MAIN:image_size"
  input_stream: "LOOP:face_landmarks"
  input_stream_info: {
    tag_index: "LOOP"
    back_edge: true
  }
  output_stream: "PREV_LOOP:prev_face_landmarks"
}

node {
  calculator: "FaceLandmarksToRoi"
  input_stream: "LANDMARKS:prev_face_landmarks"
  input_stream: "IMAGE_SIZE:image_size"
  output_stream: "ROI:prev_face_landmarks_rect"
}

node {
  calculator: "RoiTrackingCalculator"
  input_stream: "PREV_LANDMARKS:prev_face_landmarks"
  input_stream: "PREV_LANDMARKS_RECT:prev_face_landmarks_rect"
  input_stream: "RECROP_RECT:face_recrop_roi"
  input_stream: "IMAGE_SIZE:image_size"
  output_stream: "TRACKING_RECT:face_tracking_roi"
  options: {
    [mediapipe.RoiTrackingCalculatorOptions.ext] {
      rect_requirements: {
        rotation_degrees: 15.0
        translation: 0.1
        scale: 0.3
      }
      landmarks_requirements: {
        recrop_rect_margin: -0.2
      }
    }
  }
}

###

node: {
  calculator: "ImageToTensorCalculator"
  input_stream: "IMAGE:transformed_input_video"
  input_stream: "NORM_RECT:face_tracking_roi"
  output_stream: "TENSORS:input_tensors_face_lm"
  options: {
    [mediapipe.ImageToTensorCalculatorOptions.ext] {
      output_tensor_width: 192
      output_tensor_height: 192
      output_tensor_float_range {
        min: 0.0
        max: 1.0
      }
    }
  }
}

node {
  calculator: "FaceLandmarksModelLoader"
  input_side_packet: "WITH_ATTENTION:refine_face_landmarks"
  output_side_packet: "MODEL:model"
}

node {
  calculator: "TfLiteCustomOpResolverCalculator"
  output_side_packet: "op_resolver"
}

node {
  calculator: "InferenceCalculator"
  input_stream: "TENSORS:input_tensors_face_lm"
  input_side_packet: "MODEL:model"
  input_side_packet: "CUSTOM_OP_RESOLVER:op_resolver"
  output_stream: "TENSORS:output_tensors_face_lm"
  options: {
    [mediapipe.InferenceCalculatorOptions.ext] {
      delegate { xnnpack {} }
    }
  }
}

node {
  calculator: "SwitchContainer"
  input_side_packet: "ENABLE:refine_face_landmarks"
  input_stream: "output_tensors_face_lm"
  output_stream: "landmark_tensors"
  output_stream: "face_flag_tensor"
  options: {
    [mediapipe.SwitchContainerOptions.ext] {
      contained_node: {
        calculator: "SplitTensorVectorCalculator"
        options: {
          [mediapipe.SplitVectorCalculatorOptions.ext] {
            ranges: { begin: 0 end: 1 }
            ranges: { begin: 1 end: 2 }
          }
        }
      }
      contained_node: {
        calculator: "SplitTensorVectorCalculator"
        options: {
          [mediapipe.SplitVectorCalculatorOptions.ext] {
            ranges: { begin: 0 end: 6 }
            ranges: { begin: 6 end: 7 }
          }
        }
      }
    }
  }
}

node {
  calculator: "TensorsToFloatsCalculator"
  input_stream: "TENSORS:face_flag_tensor"
  output_stream: "FLOAT:face_presence_score"
  options {
    [mediapipe.TensorsToFloatsCalculatorOptions.ext] {
      activation: SIGMOID
    }
  }
}

node {
  calculator: "ThresholdingCalculator"
  input_stream: "FLOAT:face_presence_score"
  output_stream: "FLAG:face_presence"
  options: {
    [mediapipe.ThresholdingCalculatorOptions.ext] {
      threshold: 0.5
    }
  }
}

node {
  calculator: "GateCalculator"
  input_stream: "landmark_tensors"
  input_stream: "ALLOW:face_presence"
  output_stream: "ensured_landmark_tensors"
}

node {
  calculator: "SwitchContainer"
  input_side_packet: "ENABLE:refine_face_landmarks"
  input_stream: "TENSORS:ensured_landmark_tensors"
  output_stream: "LANDMARKS:raw_landmarks"
  options: {
    [mediapipe.SwitchContainerOptions.ext] {
      contained_node: {
        calculator: "TensorsToFaceLandmarks"
      }
      contained_node: {
        calculator: "TensorsToFaceLandmarksWithAttention"
      }
    }
  }
}

node {
  calculator: "LandmarkProjectionCalculator"
  input_stream: "NORM_LANDMARKS:raw_landmarks"
  input_stream: "NORM_RECT:face_tracking_roi"
  output_stream: "NORM_LANDMARKS:face_landmarks"
}
